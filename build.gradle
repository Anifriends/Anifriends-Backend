buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'

	//RestDocs
	id "org.asciidoctor.jvm.convert" version "3.3.2"

	id 'jacoco'
	id "org.sonarqube" version "4.4.1.3373"
}

sonar {
	properties {
		property "sonar.projectKey", "Anifriends_Anifriends-Backend"
		property "sonar.organization", "anifriends"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}

group = 'com.clova'
version = '0.0.1-SNAPSHOT'

configurations {
	//RestDocs
	asciidoctorExt
}

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// DB
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	//RestDocs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	//querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

tasks.named('test') {
	useJUnitPlatform()
}

//RestDocs start
ext {
	snippetsDir = file('build/generated-snippets')
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

asciidoctor {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	dependsOn test
}

bootJar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}

tasks.register('copyDocument', Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}
//RestDocs end

// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [generated]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}

//jacoco start
jacoco {
	toolVersion = "0.8.9"
}
jacocoTestReport {
	dependsOn test  // report를 생성하기 전에 테스트를 실행해야합니다.
	reports {
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
	finalizedBy jacocoTestCoverageVerification  // 테스트 실행 후 항상 테스트 커버리지 검증을 실행합니다.
}
jacocoTestCoverageVerification {  // 코드 커버리지를 검증합니다. 규칙을 만족하지 못하면 빌드는 실패합니다.
	violationRules {
		rule {  // 규칙을 지정합니다.
			enabled = true
			element = 'CLASS'  // 클래스 단위로 규칙을 체크합니다.

			// 브랜치 커버리지를 최소 70% 만족시켜야 합니다.
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				maximum = 0.70
			}

			// 라인 커버리지를 최소 70% 만족시켜야 합니다.
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.70
			}

			excludes = ['Q*.class', '*Application*', '*Config*', '*Exception*', '*Response*']  // Q클래스와 메인 메서드, configuartion을 대상에서 제외합니다.
		}
	}
}
//jacoco end
